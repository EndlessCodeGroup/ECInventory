"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[899],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_position:1},r="Configuration Basics",l={unversionedId:"config/basics",id:"config/basics",title:"Configuration Basics",description:"ECInventory uses [HOCON] format for configuration files.",source:"@site/docs/config/basics.md",sourceDirName:"config",slug:"/config/basics",permalink:"/ECInventory/docs/config/basics",draft:!1,editUrl:"https://github.com/EndlessCodeGroup/ECInventory/tree/develop/website/docs/config/basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Commands and permissions",permalink:"/ECInventory/docs/usage/commands"},next:{title:"Plugin configuration",permalink:"/ECInventory/docs/config/plugin"}},s={},c=[{value:"HOCON basics",id:"hocon-basics",level:2},{value:"Objects",id:"objects",level:3},{value:"Arrays and lists",id:"arrays-and-lists",level:3},{value:"List of objects",id:"list",level:3},{value:"Types",id:"types",level:2},{value:"String",id:"string",level:3},{value:"Number",id:"number",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Item",id:"item",level:3},{value:"Advanced HOCON",id:"advanced-hocon",level:2},{value:"Path as key",id:"path-as-key",level:3},{value:"Substitutions",id:"substitutions",level:3},{value:"Concatenation and inheritance",id:"concatenation-and-inheritance",level:3}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration-basics"},"Configuration Basics"),(0,i.kt)("p",null,"ECInventory uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lightbend/config/blob/main/HOCON.md"},"HOCON")," format for configuration files.\nConfiguration files use the file extension ",(0,i.kt)("inlineCode",{parentName:"p"},".conf"),"."),(0,i.kt)("h2",{id:"hocon-basics"},"HOCON basics"),(0,i.kt)("p",null,"HOCON (Human-Optimized Config Object Notation) is a human-friendly configuration format, and a superset of JSON."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is a brief HOCON format description targeted on users who already familiar with YAML.\nIf you want to know all about HOCON, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lightbend/config/blob/main/HOCON.md"},"read the specification"),".")),(0,i.kt)("p",null,"Properties in HOCON has ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," separated by ",(0,i.kt)("inlineCode",{parentName:"p"},"key-value separator"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," is a string describing ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," destination"),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," may be string, number, object, boolean, enumeration type or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"key-value separator")," separates key and value, should be either ",(0,i.kt)("inlineCode",{parentName:"li"},":")," (YAML-like), or ",(0,i.kt)("inlineCode",{parentName:"li"},"=")," (JSON-like)")),(0,i.kt)("p",null,"If line in config starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"//")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),", it is considered a comment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# This is a comment. It can contain additional information about property.\n# Here "display-name" is a key, ":" is a key-value separator and "My beautiful inventory" is a value.\ndisplay-name: "My beautiful inventory"\n')),(0,i.kt)("p",null,"HOCON config may be very similar to YAML, but it has significant differences in objects and lists declaration."),(0,i.kt)("h3",{id:"objects"},"Objects"),(0,i.kt)("p",null,"YAML uses indentation for object declaration, but HOCON uses curly braces ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'## YAML\nmy-slot:\n  display-name: "Custom slot"\n  type: storage\n\n## HOCON\nmy-slot {\n  display-name: "Custom slot"\n  type: storage\n}\n# HOCON also supports one-line object declaration\nmy-slot { display-name: "Custom slot", type: storage }\n')),(0,i.kt)("h3",{id:"arrays-and-lists"},"Arrays and lists"),(0,i.kt)("p",null,"YAML has two notations to declare list elements \u2014 using square braces ",(0,i.kt)("inlineCode",{parentName:"p"},"[]")," or using hyphen ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),' at the line start.\nHOCON supports only "square braces" style:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'## YAML\ndescription:\n  - "First line"  \n  - "Second line"\n# One-line list declaration also supported\ndescription: ["First line", "Second line"]\n\n## HOCON\ndescription: [\n  "First line",\n  "Second line"\n]\n# One-line list declaration looks exactly like in YAML\ndescription: ["First line", "Second line"]\n')),(0,i.kt)("h3",{id:"list"},"List of objects"),(0,i.kt)("p",null,"YAML allows declaring list of objects using hyphen list notation, but in HOCON we should use curly braces to declare objects in list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'## YAML\nactions:\n  - on: [right_click]\n    do: ["weather clear"]\n\n## HOCON\nactions: [\n  {\n      on: [right_click]\n      do: ["weather clear"]\n  }\n]\n# Or more compact variant using one-line object declaration\nactions: [\n  {on: [right_click], do: ["weather_clear"]}\n]\n')),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"Here are listed common types used in configs.\nOther types are described in the place of usage."),(0,i.kt)("h3",{id:"string"},"String"),(0,i.kt)("p",null,"Strings may be quoted and unquoted.\nIt is recommended to always use quoted strings because unquoted strings has limited set of characters they can contain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'quoted-string: "This is a string value"\nunquoted-string: This also allowed but not recommended\n')),(0,i.kt)("h3",{id:"number"},"Number"),(0,i.kt)("p",null,"Numbers may be either integer, or with floating point.\nAllowed range usually specified in field specification."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"integer-value: 42\nfloat-value: 0.5\n")),(0,i.kt)("h3",{id:"boolean"},"Boolean"),(0,i.kt)("p",null,"Primitive logical type that can have only the values ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (aliases: ",(0,i.kt)("inlineCode",{parentName:"p"},"yes"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"on"),") or ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," (aliases: ",(0,i.kt)("inlineCode",{parentName:"p"},"no"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"off"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"boolean-field: true\n")),(0,i.kt)("h3",{id:"item"},"Item"),(0,i.kt)("p",null,"Item ID that can be used to obtain item via ",(0,i.kt)("a",{parentName:"p",href:"https://www.spigotmc.org/resources/82515/"},"Mimic"),".\nYou can add namespace if you want to get item from the defined source."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"minecraft-item: minecraft:iron_sword\ncustom-item: mmoitems:iron_sword\nitem-without-namespace: iron_sword\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can check list of available items using command:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"/mimic item give <player> <item_id>\n"))),(0,i.kt)("h2",{id:"advanced-hocon"},"Advanced HOCON"),(0,i.kt)("p",null,"HOCON provides features good to know because it may be useful when you configure the plugin."),(0,i.kt)("h3",{id:"path-as-key"},"Path as key"),(0,i.kt)("p",null,"You can use paths as a keys for values to configure nested objects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'my-slot {\n  display-name: "Change my type"\n}\n\n# HOCON will go to the "my-slot" and change its property called "type"\nmy-slot.type: generic\n\n# This is also a valid notation to declare "other-slot" object\nother-slot.display-name: "Slot created by path keys"\nother-slot.type: generic\n')),(0,i.kt)("h3",{id:"substitutions"},"Substitutions"),(0,i.kt)("p",null,"HOCON allows referring from value to other paths in configuration.\nReferent path should be in format ",(0,i.kt)("inlineCode",{parentName:"p"},"${absolute.path.to.field}"),"."),(0,i.kt)("p",null,"For example, you can create a variable and reuse it in several values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'server-name: "Best Server"\n\nserver-info-slot {\n  display-name: ${server-name} info\n  description: ["Server name is "${server-name}]\n  type: gui\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Substitutions are not allowed inside quotes ",(0,i.kt)("inlineCode",{parentName:"p"},'"'),".\nSo you should move substitution out of the quotes the following way:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Bad\n"Server name is ${server-name}!"\n\n# Good\n"Server name is "${server-name}"!"\n'))),(0,i.kt)("h3",{id:"concatenation-and-inheritance"},"Concatenation and inheritance"),(0,i.kt)("p",null,"HOCON allows concatenating values including objects and lists.\nIt is a powerful feature in combination with ",(0,i.kt)("a",{parentName:"p",href:"#substitutions"},"substitutions"),"."),(0,i.kt)("p",null,"Lists concatenation can be used to share common configurations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"offhand {\n  allowed-items: [dagger, shield]\n}\n\n# We can hold in main hand everything we can hold in offhand and sword or axe additionally\nmainhand {\n  allowed-items: ${offhand.allowed-items} [sword, axe]\n}\n")),(0,i.kt)("p",null,"Objects concatenation can be used for inheritance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'ammo-base {\n  type: generic\n  max-stack-size: 16\n}\n\n# Arrows slot will inherit all fields from "ammo-base"\narrows: ${ammo-base} {\n  allowed-items: [arrow]\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Remember you should use absolute path to objects for substitution.\nIn real configs paths will look like ",(0,i.kt)("inlineCode",{parentName:"p"},"slots.ammo-base")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ammo-base"),".")))}u.isMDXComponent=!0}}]);